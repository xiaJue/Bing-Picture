package com.as.xiajue.picturebing.model.database.genUtils;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.as.xiajue.picturebing.model.database.bean.ImageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_BEAN".
*/
public class ImageBeanDao extends AbstractDao<ImageBean, Void> {

    public static final String TABLENAME = "IMAGE_BEAN";

    /**
     * Properties of entity ImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", false, "URL");
        public final static Property Copyright = new Property(1, String.class, "copyright", false, "COPYRIGHT");
        public final static Property Enddate = new Property(2, String.class, "enddate", false, "ENDDATE");
    }


    public ImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_BEAN\" (" + //
                "\"URL\" TEXT UNIQUE ," + // 0: url
                "\"COPYRIGHT\" TEXT," + // 1: copyright
                "\"ENDDATE\" TEXT UNIQUE );"); // 2: enddate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageBean entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String copyright = entity.getCopyright();
        if (copyright != null) {
            stmt.bindString(2, copyright);
        }
 
        String enddate = entity.getEnddate();
        if (enddate != null) {
            stmt.bindString(3, enddate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageBean entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String copyright = entity.getCopyright();
        if (copyright != null) {
            stmt.bindString(2, copyright);
        }
 
        String enddate = entity.getEnddate();
        if (enddate != null) {
            stmt.bindString(3, enddate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ImageBean readEntity(Cursor cursor, int offset) {
        ImageBean entity = new ImageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // copyright
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // enddate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageBean entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCopyright(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnddate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ImageBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ImageBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ImageBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
